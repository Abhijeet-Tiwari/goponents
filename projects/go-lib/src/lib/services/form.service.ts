import { Injectable } from '@angular/core';
import { AbstractControl, FormControl, ValidationErrors } from '@angular/forms';

@Injectable({
  providedIn: 'root'
})
export class GoFormService {

  /**
   * An object containing keys and methods matching that of the Angular ValidationErrors methods.
   * Each method returns a string generated by args passed by the Validator.
   */
  ngValidators: { [k: string]: (...args: any) => string } = {
    email: (obj: ValidationErrors): string => !obj.email ? `Must be a valid email address.` : '',
    max: (obj: ValidationErrors): string => `Must be less than ${obj.max}, entered ${obj.actual}`,
    maxlength: (obj: ValidationErrors): string => `Must not exceed ${obj.requiredLength} characters, entered ${obj.actualLength}`,
    min: (obj: ValidationErrors): string => `Must be greater than ${obj.min}, entered ${obj.actual}`,
    minlength: (obj: ValidationErrors): string => `Must contain at least ${obj.requiredLength} characters, entered ${obj.actualLength}`,
    required: (): string => 'This is a required field',
    requiredtrue: (): string => 'This is a required field',
    pattern: () => 'Invalid Input'
  };

  /**
   * Generates a base class object for ngClass with the common go-form classes / logic for inputs
   * @param control FormControl to check validity
   * @param theme Theme for the control
   * @returns ngClass object
   */
  baseInputClasses(control: FormControl | AbstractControl, theme: 'light' | 'dark'): { [k: string]: boolean } {
    return {
      'go-form__input--error': control.invalid && control.touched, 'go-form__input--dark': theme === 'dark'
    };
  }

  /**
   * Generates a base class object for ngClass with the common go-form classes / logic for fieldsets
   * @param control FormControl to check validity
   * @param theme Theme for the control
   * @returns ngClass object
   */
  baseFieldsetClasses(control: FormControl | AbstractControl, theme: 'light' | 'dark'): { [k: string]: boolean } {
    return {
      'go-form__fieldset--error': control.invalid && control.touched, 'go-form__fieldset--dark': theme === 'dark'
    };
  }

  /**
   * Used to generate unique ids for a form element
   * @param label prefix label for the input
   * @param inputType fall back input type
   * @returns generated string id
   */
  generateId(label: string, inputType: string): string {
    const labelText: string = label || inputType;
    const idArray: Array<string> = labelText.split(' ');

    // NOTE: There is a chance that this number is not unique.
    idArray.push(String(Math.round(Math.random() * 1000000)));

    return idArray.join('-');
  }

  /**
   * Checks whether Validators.required exists on the control
   * @param control FormControl to check
   * @returns true if exists, false otherwise
   */
  requiredValidatorExists(control: FormControl | AbstractControl): boolean {
    if (control.validator) {
      const validator: ValidationErrors = control.validator({} as AbstractControl);
      if (validator && validator.required) {
        return true;
      }
    }

    return false;
  }
}
